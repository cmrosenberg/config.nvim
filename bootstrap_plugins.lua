--- Mostly generated by Anthropic Claude Sonnet 4
--- using the following prompt (with some post modifications by me):
---
--- ```
--- Hi! Could you write a lua script for neovim that installs a set of
--- packages using the vim/neovim built in package module? I would like
--- to be able to invoke the script using neovim as the lua interpreter
--- - no external dependencies.
--- ````
local packages = {
    {
        name = 'nvim-lspconfig',
        url = 'https://github.com/neovim/nvim-lspconfig.git',
        optional = false
    },
    {
        name = 'vim-commentary',
        url = 'https://github.com/tpope/vim-commentary.git',
        optional = false
    },
    {
        name = 'vim-fugitive',
        url = 'https://github.com/tpope/vim-fugitive.git',
        optional = false
    },
    {
        name = 'vim-eunuch',
        url = 'https://github.com/tpope/vim-eunuch.git',
        optional = false
    },
    {
        name = 'plenary',
        url = 'https://github.com/nvim-lua/plenary.nvim.git',
        optional = false
    },
    {
        name = 'telescope.nvim',
        url = 'https://github.com/nvim-telescope/telescope.nvim.git',
        optional = false,
        branch = '0.1.8'
    },
}

local function get_pack_path()

    local data_path = vim.fn.stdpath('data')
    return data_path .. '/site/pack/plugins'
end

local function git_clone(package_info, destination)

    local cmd
    if package_info.branch then
        cmd = string.format('git clone --depth=1 --branch %s %s %s', package_info.branch, package_info.url, destination)
        print('Cloning: ' .. package_info.url .. ' (branch/ref: ' .. package_info.branch .. ')')
    else
        cmd = string.format('git clone --depth=1 %s %s', package_info.url, destination)
        print('Cloning: ' .. package_info.url)
    end

    local result = vim.fn.system(cmd)
    local exit_code = vim.v.shell_error

    if exit_code == 0 then
        print('✓ Successfully cloned to: ' .. destination)
        return true
    else
        print('✗ Failed to clone: ' .. package_info.url)
        print('Error: ' .. result)
        return false
    end
end

local function package_exists(pack_path, name)

    local start_path = pack_path .. '/start/' .. name
    local opt_path = pack_path .. '/opt/' .. name

    return vim.fn.isdirectory(start_path) == 1 or vim.fn.isdirectory(opt_path) == 1
end

local function install_package(pack_path, package_info)

    if package_exists(pack_path, package_info.name) then
        print('Package already exists: ' .. package_info.name)
        return true
    end

    install_path = pack_path .. '/' .. (package_info.optional and 'opt' or 'start')
    print(install_path)
    vim.fn.mkdir(install_path, 'p')

    destination = install_path .. '/' .. package_info.name
    return git_clone(package_info, destination)
end

local function install_packages(package_list)
    local pack_path = get_pack_path()

    print('Installing packages to: ' .. pack_path)
    print(string.rep('-', 50))

    for _, package_info in ipairs(packages) do
        if not install_package(pack_path, package_info) then
            print("FAILED to install" .. package_info.name)
            return
        end
    end
end

local function main()

    if vim.fn.executable('git') == 0 then
        print('Error: git is not available in PATH')
        return
    end

    install_packages()
end

main()
